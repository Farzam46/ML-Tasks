# -*- coding: utf-8 -*-
"""Task7&8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sjOReiBSKx1Lr-7CmsSfjGD-BQ88uide
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_csv('/content/COVID-19 Daily (1).csv')

df.isnull().sum()

df.info()

df.describe()

df['Date'] = pd.to_datetime(df['Date'])
df_till_sep = df[df['Date'] <= '2020-09-01']
DailyTests = df_till_sep['Daily Tests'].sum()
print(f"Total tests performed till September 01, 2020: {DailyTests}")

# Daily Testing  with the Trend Line Graph
plt.figure(figsize=(12, 6))
plt.plot(df['Date'], df['Daily Tests'], marker='o', linestyle='-', color='blue')
plt.title('Daily Testing Trend')
plt.xlabel('Date')
plt.ylabel('Daily Tests')
plt.grid(True)
plt.show()

                                              # the Scattered Diagram
plt.figure(figsize=(12, 6))
plt.scatter(df['Date'], df['Daily Tests'], color='blue')
plt.title('Daily Testing Scatter Plot')
plt.xlabel('Date')
plt.ylabel('Daily Tests')
plt.grid(True)
plt.show()

                                                    # the Bar Graph
plt.figure(figsize=(12, 6))
plt.bar(df['Date'], df['Daily Tests'], color='green')
plt.title('Daily Testing Bar Graph')
plt.xlabel('Date')
plt.ylabel('Daily Tests')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

# Scatter diagram with above-average and below-average daily testing
average_daily_tests = df['Daily Tests'].mean()
above_average = df[df['Daily Tests'] > average_daily_tests]
below_average = df[df['Daily Tests'] <= average_daily_tests]

plt.figure(figsize=(14, 6))
plt.scatter(above_average['Date'], above_average['Daily Tests'], color='red', label='Above Average')
plt.scatter(below_average['Date'], below_average['Daily Tests'], color='green', label='Below Average')
plt.title('Daily Testing Scatter Plot with Average Comparison')
plt.xlabel('Date')
plt.ylabel('Daily Tests')
plt.legend()
plt.grid(True)
plt.show()

# Resample to a weekly and monthly stats
df['Date'] = pd.to_datetime(df['Date'])
df_weekly = df.resample('W', on='Date').sum()
df_monthly = df.resample('M', on='Date').sum()

# Weekly statistics
print(f"Total tests performed till September 01, 2020 (weekly): {df_weekly['Daily Tests'].sum()}")

# Plot a weekly trend
plt.figure(figsize=(12, 6))
plt.plot(df_weekly.index, df_weekly['Daily Tests'], marker='o', linestyle='-', color='blue')
plt.title('Weekly Testing Trend')
plt.xlabel('Week')
plt.ylabel('Weekly Tests')
plt.grid(True)
plt.show()

# Plot a weekly scatter
plt.figure(figsize=(12, 6))
plt.scatter(df_weekly.index, df_weekly['Daily Tests'], color='blue')
plt.title('Weekly Testing Scatter Plot')
plt.xlabel('Week')
plt.ylabel('Weekly Tests')
plt.grid(True)
plt.show()

# Plot a weekly bar graph
plt.figure(figsize=(12, 6))
plt.bar(df_weekly.index, df_weekly['Daily Tests'], color='green')
plt.title('Weekly Testing Bar Graph')
plt.xlabel('Week')
plt.ylabel('Weekly Tests')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

# Find max and min weekly tests
max_weekly_tests = df_weekly['Daily Tests'].max()
min_weekly_tests = df_weekly['Daily Tests'].min()
max_weekly_tests_date = df_weekly['Daily Tests'].idxmax()
min_weekly_tests_date = df_weekly['Daily Tests'].idxmin()
print(f"Maximum weekly tests: {max_weekly_tests} on {max_weekly_tests_date}")
print(f"Minimum weekly tests: {min_weekly_tests} on {min_weekly_tests_date}")


# Monthly stats
print(f"Total tests performed till September 01, 2020 (monthly): {df_monthly['Daily Tests'].sum()}")

# Plot monthly trend
plt.figure(figsize=(12, 6))
plt.plot(df_monthly.index, df_monthly['Daily Tests'], marker='o', linestyle='-', color='blue')
plt.title('Monthly Testing Trend')
plt.xlabel('Month')
plt.ylabel('Monthly Tests')
plt.grid(True)
plt.show()

# Plot monthly scatter
plt.figure(figsize=(12, 6))
plt.scatter(df_monthly.index, df_monthly['Daily Tests'], color='blue')
plt.title('Monthly Testing Scatter Plot')
plt.xlabel('Month')
plt.ylabel('Monthly Tests')
plt.grid(True)
plt.show()

# Plot monthly bar graph
plt.figure(figsize=(12, 6))
plt.bar(df_monthly.index, df_monthly['Daily Tests'], color='green')
plt.title('Monthly Testing Bar Graph')
plt.xlabel('Month')
plt.ylabel('Monthly Tests')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

# Find max and min monthly tests
max_monthly_tests = df_monthly['Daily Tests'].max()
min_monthly_tests = df_monthly['Daily Tests'].min()
max_monthly_tests_date = df_monthly['Daily Tests'].idxmax()
min_monthly_tests_date = df_monthly['Daily Tests'].idxmin()
print(f"Maximum monthly tests: {max_monthly_tests} on {max_monthly_tests_date}")
print(f"Minimum monthly tests: {min_monthly_tests} on {min_monthly_tests_date}")

# Calculation  Per Thousand & Million stats
df['Population'] = 1000000 # Assumed population
df['Daily Tests Per Thousand'] = df['Daily Tests'] / (df['Population'] / 1000)
df['Daily Tests Per Million'] = df['Daily Tests'] / (df['Population'] / 1000000)
df['Daily Cases Per Thousand'] = df['Daily Cases'] / (df['Population'] / 1000)
df['Daily Cases Per Million'] = df['Daily Cases'] / (df['Population'] / 1000000)
df['Daily Recoveries Per Thousand'] = df['Daily Recoveries'] / (df['Population'] / 1000)
df['Daily Recoveries Per Million'] = df['Daily Recoveries'] / (df['Population'] / 1000000)
df['Daily Deaths Per Thousand'] = df['Daily Deaths'] / (df['Population'] / 1000)
df['Daily Deaths Per Million'] = df['Daily Deaths'] / (df['Population'] / 1000000)

                                        # ML Model for predicting future trend of daily cases
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.impute import SimpleImputer # import the SimpleImputer class

                                            # Prepare data for the model
X = df[['Date']].values.astype(float)
y_cases = df['Daily Cases'].values.astype(float)
y_deaths = df['Daily Deaths'].values.astype(float)

                                    # Convert date to numerical values for model training
X = df['Date'].apply(lambda x: x.timestamp()).values.reshape(-1, 1)

# Impute values with the mean
imputer = SimpleImputer(strategy='mean') # create an instance of the SimpleImputer class
y_cases = imputer.fit_transform(y_cases.reshape(-1, 1)).flatten() # fit and transform the imputer on y_cases
y_deaths = imputer.fit_transform(y_deaths.reshape(-1, 1)).flatten() # fit and transform the imputer on y_deaths

# Split data into training and testing sets
X_train_cases, X_test_cases, y_train_cases, y_test_cases = train_test_split(X, y_cases, test_size=0.2, random_state=42)
X_train_deaths, X_test_deaths, y_train_deaths, y_test_deaths = train_test_split(X, y_deaths, test_size=0.2, random_state=42)

# Train the Linear Regression model for daily cases
model_cases = LinearRegression()
model_cases.fit(X_train_cases, y_train_cases)

# Train the Linear Regression model for daily deaths
model_deaths = LinearRegression()
model_deaths.fit(X_train_deaths, y_train_deaths)

# Make predictions
y_pred_cases = model_cases.predict(X_test_cases)
y_pred_deaths = model_deaths.predict(X_test_deaths)

# Evaluate the model
mse_cases = mean_squared_error(y_test_cases, y_pred_cases)
mse_deaths = mean_squared_error(y_test_deaths, y_pred_deaths)
print(f"Mean Squared Error for Daily Cases: {mse_cases}")
print(f"Mean Squared Error for Daily Deaths: {mse_deaths}")

# Predict future trend (example: predict for the next 30 days)
future_dates = pd.date_range(start=df['Date'].max(), periods=30, freq='D')
# Convert DatetimeIndex to Series
future_dates = pd.date_range(start=df['Date'].max(), periods=30, freq='D').to_series()

# Now you can use apply
future_dates_timestamp = future_dates.apply(lambda x: x.timestamp()).values.reshape(-1, 1)
future_cases_pred = model_cases.predict(future_dates_timestamp)
future_deaths_pred = model_deaths.predict(future_dates_timestamp)

# Visualize the predictions
plt.figure(figsize=(12, 6))
plt.plot(df['Date'], df['Daily Cases'], label='Actual Cases')
plt.plot(future_dates, future_cases_pred, label='Predicted Cases')
plt.title('Daily Cases Prediction')
plt.xlabel('Date')
plt.ylabel('Daily Cases')
plt.legend()
plt.show()

plt.figure(figsize=(12, 6))
plt.plot(df['Date'], df['Daily Deaths'], label='Actual Deaths')
plt.plot(future_dates, future_deaths_pred, label='Predicted Deaths')
plt.title('Daily Deaths Prediction')
plt.xlabel('Date')
plt.ylabel('Daily Deaths')
plt.legend()
plt.show()