# -*- coding: utf-8 -*-
"""Task4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UEZOAHOo7IYYUqh-iWKQiPQred3f7eI1
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/transaction_anomalies_dataset.csv')

"""# **Question** **no** **1**"""

df.isnull().sum()

df.info()

df.describe()

"""## **Question** **no** **2**"""

print(df.columns)

plt.figure(figsize=(10, 6))


sns.histplot(df['Transaction_Amount'], kde=True)

plt.title('Distribution of Transaction Amounts')
plt.xlabel('Amount')
plt.ylabel('Frequency')
plt.show()

"""## **Question** **no** **3**"""

import matplotlib.pyplot as plt

transaction_stats = df.groupby('Account_Type')['Transaction_Amount'].describe()


print(transaction_stats)


plt.figure(figsize=(10, 6))
sns.boxplot(x='Account_Type', y='Transaction_Amount', data=df)
plt.title('Distribution of Transaction Amounts by Account Type')
plt.xlabel('Account Type')
plt.ylabel('Transaction Amount')
plt.show()

"""## **Question** ***no*** **4**"""

import matplotlib.pyplot as plt

average_transaction_by_age = df.groupby('Age')['Transaction_Amount'].mean() # average transaction

print(average_transaction_by_age)


plt.figure(figsize=(10, 6))  # visualoze
average_transaction_by_age.plot(kind='bar')
plt.title('Average Transaction Amount by Age Group')
plt.xlabel('Age Group')
plt.ylabel('Average Transaction Amount')
plt.xticks(rotation=45)
plt.show()

"""## **Question** ***no*** **5**:"""

transactions_by_day = df['Day_of_Week'].value_counts()
transactions_by_day.plot(kind='bar')
plt.title('Transactions Count by Day of the Week')
plt.xlabel('Day of the Week')
plt.ylabel('Number of Transactions')
plt.show()

"""## **Question** no **6**"""

numerical_df = df.select_dtypes(include=['number'])

correlation = numerical_df.corr()
import seaborn as sns               # Import seaborn for heatmap
sns.heatmap(correlation, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

"""## **Question** no **7**"""

import matplotlib.pyplot as plt
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Transaction_Amount', y='Time_of_Day', hue='Transaction_Amount', data=df)
plt.title('Anomalies Visualization')
plt.xlabel('Transaction Amount')
plt.ylabel('Time of Day')
plt.show()

"""## **Question** **no** *8*"""

print(df.columns)
num_anomalies = df['Transaction_Amount'].sum()  # Replace 'Correct_Column_Name' with the actual column name
total_transactions = len(df)
anomaly_ratio = num_anomalies / total_transactions

print("Number of anomalies:", num_anomalies)
print("Total number of transactions:", total_transactions)
print("Anomaly ratio:", anomaly_ratio)

"""## **Question** no **9**:"""

from sklearn.ensemble import IsolationForest
import pandas as pd


features = ['Transaction_Amount', 'Time_of_Day', 'Day_of_Week', 'Age']
X = df[features]


# Assuming 'Time_of_Day' is in the format 'HH:MM'
X['Time_of_Day'] = X['Time_of_Day'].apply(lambda x: int(x.split(':')[0]) * 60 + int(x.split(':')[1]))

# Convert 'Day_of_Week' to numerical representation using one-hot encoding
X = pd.get_dummies(X, columns=['Day_of_Week'])


model = IsolationForest(contamination=0.05)  # Adjust contamination as needed
model.fit(X)

# Get anomaly predictions
df['Anomaly'] = model.predict(X)

# Convert predictions to binary (1 for anomaly, 0 for normal)
df['Anomaly'] = df['Anomaly'].apply(lambda x: 1 if x == -1 else 0)

print(df[['Transaction_Amount', 'Time_of_Day', 'Age', 'Anomaly']].head())

from sklearn.ensemble import IsolationForest
import pandas as pd

# Select relevant features
features = ['Transaction_Amount', 'Time_of_Day', 'Day_of_Week', 'Age']
X = df[features]

# Convert 'Time_of_Day' to minutes (handling both hours and minutes)
X['Time_of_Day'] = X['Time_of_Day'].apply(lambda x: int(x.split(':')[0]) * 60 + int(x.split(':')[1]))

# Convert 'Day_of_Week' to numerical representation using one-hot encoding
X = pd.get_dummies(X, columns=['Day_of_Week'])

# Create and fit the Isolation Forest model
model = IsolationForest(contamination=0.05)
model.fit(X)

# Get anomaly predictions
df['Anomaly'] = model.predict(X)

# Convert predictions to binary (1 for anomaly, 0 for normal)
df['Anomaly'] = df['Anomaly'].apply(lambda x: 1 if x == -1 else 0)

# Use the correct target variable for the classification report (Anomaly column)
from sklearn.metrics import classification_report
print(classification_report(df['Anomaly'], model.predict(X)))

"""## **Question** no **11**:"""

df['Anomaly'] = model.predict(X)
df['Anomaly'] = df['Anomaly'].apply(lambda x: 1 if x == -1 else 0)
anomalies = df[df['Anomaly'] == 1]

# Display the anomalies
print(anomalies)